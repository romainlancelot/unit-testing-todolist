{
	"info": {
		"_postman_id": "e42d7762-5107-4ad9-975a-408ed0dd891d",
		"name": "unit_testing_todolist",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27635083"
	},
	"item": [
		{
			"name": "Create item in todolist error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - status and message\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.exist;",
							"    pm.expect(responseData.message).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Status is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"test\",\n    \"content\": \"j'ai jamais utilisé postman pour faire des test???\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{uri}}/users/102032002/todos/items/",
					"host": [
						"{{uri}}"
					],
					"path": [
						"users",
						"102032002",
						"todos",
						"items",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"If user created successfully or already exists response status code is 200 or 400\", function () {",
							"    var jsonData = pm.response.json();",
							"    if (pm.response.code === 200) {",
							"        pm.expect(jsonData.message).to.eql(\"User created successfully\");",
							"    }",
							"    if (pm.response.code === 400) {",
							"        pm.expect(jsonData.message).to.eql(\"User already exists\");",
							"    }",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - status and message\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('status');",
							"    pm.expect(responseData).to.have.property('message');",
							"});",
							"",
							"",
							"pm.test(\"Status is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"romain\",\n    \"email\": \"rlancelot@myges.fr\",\n    \"password\": \"testtestetets\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{uri}}/users/",
					"host": [
						"{{uri}}"
					],
					"path": [
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - status and users\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('status');",
							"    pm.expect(responseData).to.have.property('users');",
							"});",
							"",
							"",
							"pm.test(\"Validate the users array\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.users).to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Todolist object within the users array should exist and be an array\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.users).to.be.an('array');",
							"    responseData.users.forEach(function(user) {",
							"        pm.expect(user.todolist).to.exist.and.to.be.an('array');",
							"    });",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{uri}}/users/",
					"host": [
						"{{uri}}"
					],
					"path": [
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create item in todolist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - status and message\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('status');",
							"    pm.expect(responseData).to.have.property('message');",
							"});",
							"",
							"",
							"pm.test(\"Status is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"test\",\n    \"content\": \"j'ai jamais utilisé postman pour faire des test???\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{uri}}/users/1/todos/items/",
					"host": [
						"{{uri}}"
					],
					"path": [
						"users",
						"1",
						"todos",
						"items",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get todolist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - status, items\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('status');",
							"    pm.expect(responseData).to.have.property('items');",
							"});",
							"",
							"",
							"pm.test(\"Items array should contain at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.items).to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Each item has a non-negative id\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.items).to.be.an('array');",
							"    responseData.items.forEach(function(item) {",
							"        pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{uri}}/users/1/todos/items/",
					"host": [
						"{{uri}}"
					],
					"path": [
						"users",
						"1",
						"todos",
						"items",
						""
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "uri",
			"value": "http://localhost:8000/api",
			"type": "string"
		}
	]
}